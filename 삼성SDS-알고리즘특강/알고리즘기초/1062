import java.util.Scanner;

public class Main {
    static int N, K;
    static String[] words;
    static boolean[] visited = new boolean[26];
    static int selectedCount = 0;
    static int max = 0;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        N = sc.nextInt();
        K = sc.nextInt();

        words = new String[N];
        visited['a' - 'a'] = true;
        visited['n' - 'a'] = true;
        visited['t' - 'a'] = true;
        visited['i' - 'a'] = true;
        visited['c' - 'a'] = true;

        if(K == 26){
            System.out.println(N);
        } else if(K<5){
            System.out.println(0);
        } else {
            for (int i = 0; i < N; i++) {
                String str = sc.next();
                //words[i] = str.substring(4,str.length()-4);
                words[i] = str.replaceAll("[antic]", "");
            }

            selectedCount = 5;
            max = countWords();

            for (int i = 0; i < 26; i++) {
                if (visited[i] == false) {
                    dfs(i);
                }
            }
            System.out.println(max);
        }
}

    static void dfs(int index){
//        1.체크인(방문)
          visited[index] = true;
          selectedCount++;
//        2.목적지인가?: selectedCount == K  => 읽을 수 있는 단어 개수 계산
          if(selectedCount == K){
              //계산
              max = Math.max(max,countWords());
          } else {
//        3.연결된 곳을 순회 : index + 1 ~ 25
              for(int i=index+1; i<=25; i++){
//           4.갈 수 있는가? : 방문 여부
                  if(visited[i]==false){
//              5.간다. : dfs()
                      dfs(i);
                  }
              }
          }
//        6.체크아웃
          visited[index] = false;
          selectedCount--;
    }


    static int countWords(){
        int count = 0;
        for(int n=0; n<N; n++){
            boolean isPossible = true;
            String word = words[n];
            for(int i=0; i<word.length(); i++){
                if(visited[word.charAt(i) - 'a']==false) {
                    isPossible = false;
                    break;
                }
            }
            if(isPossible){
                count++;
            }
        }
        return count;
    }
}
