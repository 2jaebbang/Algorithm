import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class Main {
    static int[][] map;
    static boolean[][] visited;
    static int N, M, K, count;
    static int tempCnt;
    static ArrayList<Integer> area;

    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, 1, -1};

    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        M = Integer.parseInt(st.nextToken());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        map = new int[M][N];
        visited = new boolean[M][N];

        for (int k = 0; k < K; k++) {
            st = new StringTokenizer(br.readLine());
            int leftX = Integer.parseInt(st.nextToken());
            int leftY = Integer.parseInt(st.nextToken());
            int rightX = Integer.parseInt(st.nextToken());
            int rightY = Integer.parseInt(st.nextToken());

            for(int i=leftY; i<rightY; i++){
                for(int j=leftX; j<rightX; j++){
                    map[M-i-1][j] = 1;
                }
            }
        }
        area = new ArrayList<>();
        //1부터 시작하기 위해 0번째 인덱스 미리 채워둠.
        area.add(0);
            for(int i=0; i<M; i++){
                for(int j=0; j<N; j++){
                    if(!visited[i][j] && map[i][j] != 1){
                        //매번 tempCnt 초기화
                        tempCnt = 0;
                        count++;
                        area.add(0);
                        dfs(i, j, count);
                    }
                }
            }
        Collections.sort(area);
        System.out.println(count);
            for (int i=1; i<area.size();i++){
                System.out.print(area.get(i)+" ");
            }

    }

    static void dfs(int y, int x, int areaNumber) {
        //1.체크인(방문)
        visited[y][x] = true;
        //2.목적지인가
        tempCnt++;
        area.set(areaNumber, tempCnt);
        //3.연결된 곳을 순회
        for (int i = 0; i < 4; i++) {
            int ty = dy[i] + y;
            int tx = dx[i] + x;
            //4.갈 수 있는가?
            if (ty >= 0 && ty < M && tx >= 0 && tx < N && !visited[ty][tx] && map[ty][tx]!=1){
                    //5.간다
                    dfs(ty, tx, areaNumber);
                }
            }
        //6.체크아웃 생략
    }
}
