import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int[][] map;
    static boolean[] visited;
    static int N, person1, person2, M ,X, Y, answer;
    static boolean state;
    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        map = new int[N+1][N+1];
        visited = new boolean[N+1];
        StringTokenizer st = new StringTokenizer(br.readLine());
        person1 = Integer.parseInt(st.nextToken());
        person2 = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(br.readLine());

        for(int i=0; i< M; i++){
            st = new StringTokenizer(br.readLine());
            int parent = Integer.parseInt(st.nextToken());
            int child = Integer.parseInt(st.nextToken());
            map[child][parent] = 1;
            map[parent][child] = 1;
        }
        dfs(person1, person2, 0);
        if(state){
            System.out.println(answer);
        } else
            System.out.println(-1);

    }

    static void dfs(int person1,int person2, int cnt) {
        //1.체크인(방문)
        visited[person1] = true;
        //2.목적지인가?
        if(person1 == person2){
            state = true;
            answer = cnt;
            return;
        }
        //3.연결된 곳을 순회
        for(int i=1; i<=N; i++){
            //4.갈 수 있는가?
            if(!visited[i] && map[person1][i] == 1){
                //5.간다
                dfs(i, person2, cnt+1);
            }
        }
        //6.체크아웃
        visited[person1] = false;
    }
}
