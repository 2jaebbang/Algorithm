import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
    static int[][] map;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        map = new int[10][10];

        for (int i = 0; i < 9; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < 9; j++) {
                int num = Integer.parseInt(st.nextToken());
                map[i][j] = num;
            }
        }
        dfs(0, 0);
    }

    static void dfs(int y, int x) {
        //1.체크인(방문) 생략
        //2.목적지인가? 각 행의 열이 모두 채워졌을 경우
        if (x == 9) {
            //다음 행으로 넘어간다.
            dfs(y + 1, 0);
        }

        //마지막 행까지 (0부터 시작했으니 마지막은 8.) 진행되고 그다음으로 넘어갔을 때
        if (y == 9) {
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    System.out.print(map[i][j] + " ");
                }
                System.out.println();
            }
            System.exit(0);
        }

        //빈칸일 경우
        if (map[y][x] == 0) {
            //3.순회
            for (int i = 1; i <= 9; i++) {
                //4.방문할 수 있는가
                if (check(y,x,i)){
                    //5.방문한다
                    map[y][x] = i;
                    dfs(y,x+1);
                }
            }
            //for문에서 빠져나왔다는 것은 원하는 값이 없는 것이므로 다시 값 0으로 초기화
            map[y][x] = 0;
        } else {
            //빈칸이 아닌 경우
            dfs(y,x+1);
        }
    }

    static boolean check(int y, int x, int value){
        //열 탐색
        for(int i=0; i<9; i++){
            if(map[y][i] == value)
                return false;
        }
        //행 탐색
        for(int i=0; i<9; i++){
            if(map[i][x] == value)
                return false;
        }

        //3X3 탐색
        int col = (y/3) * 3;
        int row = (x/3) * 3;
        for(int i=col; i<col+3; i++){
            for(int j=row; j<row+3; j++){
                if(map[i][j] == value)
                    return false;
            }
        }
        return true;
    }
}
