import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int[][] map;
    static boolean[][] visited;
    static int N, M, count;

    static int[] dx = {-1, 1, 0, 0, -1, 1, -1 , 1};
    static int[] dy = {0, 0, 1, -1, -1, -1, 1 ,1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        while(true){
            st = new StringTokenizer(br.readLine());
            M = Integer.parseInt(st.nextToken());
            N = Integer.parseInt(st.nextToken());
            if(N == 0 && M == 0)
                break;
            map = new int[N][M];
            visited = new boolean[N][M];
            count = 0;
            for(int i=0; i<N; i++){
                st = new StringTokenizer(br.readLine());
                for(int j=0; j<M; j++){
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }

            for(int i=0; i<N; i++){
                for(int j=0; j<M; j++){
                    if(!visited[i][j] && map[i][j] == 1){
                        count++;
                        dfs(i,j);
                    }
                }
            }
            System.out.println(count);
        }
    }

    static void dfs(int y, int x) {
        //1.체크인(방문)
        visited[y][x] = true;
        //2.목적지인가 생략
        //3.연결된 곳을 순회
        for(int i=0; i<8; i++){
            int ty = dy[i] + y;
            int tx = dx[i] + x;
            //4.갈 수 있는가?
            if(ty >= 0 && ty < N && tx>=0 && tx<M && map[ty][tx] == 1 && !visited[ty][tx]){
                //5.간다
                dfs(ty,tx);
            }
        }
        //6.체크아웃 생략
    }
}
