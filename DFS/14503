import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int[][] map;
    static int N, M, R, C, D, answer;
                    //북  동  남  서 (해당 위치로 가는것 기준)
    static int[] dx = {0, 1, 0, -1};
    static int[] dy = {-1, 0, 1, 0};

    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new int[N][M];
        st = new StringTokenizer(br.readLine());
        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());
        D = Integer.parseInt(st.nextToken());

        //시작지점 청소하고 시작
        answer = 1;
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        dfs(R, C, D);
        System.out.println(answer);
    }

    static void dfs(int y, int x, int direction) {
        //1.체크인(방문) 방문한 지역은 2처리
        map[y][x] = 2;

        //3.연결된 곳을 순회
        for(int i=0; i<4; i++){
            direction--;
            if(direction == -1)
                direction = 3;
            int ty = dy[direction] + y;
            int tx = dx[direction] + x;
            //4.갈 수 있는가?
            if(ty >= 0 && ty < N && tx >= 0 && tx < M && map[ty][tx] == 0){
                //5.간다
                answer++;
                dfs(ty, tx, direction);
                //일반적인 dfs는 가다가 길이 막히면 다시 되돌아와서 해당 위치부터 계산하지만,
                // 이 문제는 후진할 때만 이전 길을 되돌가 가며 확인할 수 있으므로 return을 해서 다시 되돌아 와도 더 이상 움직이면 안됨
                return;
            }
        }
        //반목문을 빠져 나왔단는 것은 주변에 더 이상 청소할 공간이 없다는 의미.
        int backDirection = (direction + 2) % 4; //반대 방향으로 후진하기 위함.
        int ty = dy[backDirection] + y;
        int tx = dx[backDirection] + x;
        if(ty >= 0 && ty < N && tx >= 0 && tx < M && map[ty][tx] != 1)
            dfs(ty, tx, direction);
        //6.체크아웃 생략
    }
}
