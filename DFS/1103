import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static char[][] map;
    static boolean[][] visited;
    static int[][] dp;
    static int N, M, answer;
    static boolean state;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, 1, -1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new char[N][M];
        visited = new boolean[N][M];
        dp = new int[N][M];
        for (int i = 0; i < N; i++) {
            String line = br.readLine();
            for (int j = 0; j < M; j++) {
                map[i][j] = line.charAt(j);
            }
        }
        dfs(0, 0, 0);
        if(state){
            System.out.println(-1);
        }else System.out.println(answer);
    }

    static void dfs(int y, int x, int cnt) {
        //1.체크인(방문)
        if(visited[y][x]){
            state = true;
            return;
        }
        visited[y][x] = true;
        cnt++;
        dp[y][x] = cnt;
        answer = Math.max(cnt, answer);
        int current = map[y][x] - '0';
        //2.목적지인가? 생략
        //3.연결된 곳을 순회
        for (int i = 0; i < 4; i++) {
            int ty = dy[i]*current + y;
            int tx = dx[i]*current + x;
            //4.갈 수 있는가?
            if (ty >= 0 && ty < N && tx >= 0 && tx < M && map[ty][tx]!='H') {
                if(cnt < dp[ty][tx])
                    continue;
                    //5.간다
                    dfs(ty, tx, cnt);
            }
        }
        //6.체크아웃
        visited[y][x] = false;
        cnt--;
    }
}
