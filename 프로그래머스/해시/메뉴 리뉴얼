import java.util.*;
class Solution {
    // 코스 저장할 해시맵(코스개수, <메뉴구성, 주문갯수>)
    private static HashMap<Integer, HashMap<String, Integer>> courseMap;
    public String[] solution(String[] orders, int[] course) {
        courseMap = new HashMap<>();
        for(int i=0; i<course.length; i++){
            courseMap.put(course[i], new HashMap<>());
        }
        
        // 1.코스를 배열로 만들고 오름차순 정렬 -> 모든 메뉴 구성을 구함
        for(String order : orders){
            char[] orderToChar = order.toCharArray();
            Arrays.sort(orderToChar);
            combination(0, orderToChar, "");
        }
        
        ArrayList<String> answer = new ArrayList<>();
        
        // 2.모든 코스 후보에 대해서
        for(HashMap<String, Integer> count : courseMap.values()){
            count.values().stream()
                .max(Comparator.comparingInt(o -> o)) // 3.가장 빈도수가 높은 코스를 찾음
                .ifPresent(cnt -> count.entrySet().stream() // 4.코스에 대한 메뉴 수가 가능할 때만
                           // 5.최소 2명 이상의 손님으로부터 주문된 단품 메뉴 조합에 대해서만
                           .filter(entry -> cnt.equals(entry.getValue()) && cnt > 1 )
                           // 6.코스 메뉴만 answer 리스트에 추가
                           .forEach(entry -> answer.add(entry.getKey())));
        }
        Collections.sort(answer); // 7.오름차순으로 정렬
        return answer.toArray(new String[0]);
    }
    
    // 만들 수 있는 모든 조합을 재귀 함수를 이용해서 구현
    private static void combination(int idx, char[] order, String result) {
        //필요한 코스 메뉴의 수와 일치할 경우
        if(courseMap.containsKey(result.length())){
            HashMap<String, Integer> map = courseMap.get(result.length());
            // 해당 코스의 주문수 +1
            map.put(result, map.getOrDefault(result,0)+1);
        }
        for(int i=idx; i<order.length; i++){
            combination(i+1, order, result+order[i]);
        }
    }
}
