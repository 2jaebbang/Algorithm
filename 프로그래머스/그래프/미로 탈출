import java.util.*;
class Solution {
    // 1.위, 아래, 왼쪽, 오른쪽 이동 방향
    public static final int[] rx = { 0, 0, -1, 1 };
    public static final int[] ry = { -1, 1, 0, 0 };
    
    // 2.위치 정보(x, y)를 저장할 클래스 생성
    public static class Point {
        int x;
        int y;
        public Point(int x, int y){
            this.x = x;
            this.y = y;
        } 
    }
    
    public static int N,M;
    public static char[][] newMap;
    
    public int solution(String[] maps) {   
        N = maps.length;
        M = maps[0].length();
        
        newMap = new char[N][M];
        
        // 3.미로에 대한 정보를 배열로 저장
        for(int i=0; i<N; i++){
            newMap[i] = maps[i].toCharArray();
        }
        
        Point start = null, end = null, lever = null;
        
        // 4.시작 지점, 출구 그리고 레버의 위치를 찾음
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(newMap[i][j] == 'S') start = new Point(j,i);
                else if(newMap[i][j] == 'E') end = new Point(j,i);
                else if(newMap[i][j] == 'L') lever = new Point(j,i);
            }
        }
        
        // 5.시작 자점 -> 레버, 레버 -> 출구까지의 최단 거리를 각각 구함
        int startLever = bfs(start, lever);
        int leverEnd = bfs(lever, end);
        
        // 6.도착 불가능한 경우는 -1, 도착 가능한 경우는 최단 거리를 반환
        if(startLever == -1 || leverEnd == -1)
            return -1;
        else
            return startLever + leverEnd;
    }
    
    // start -> end 로 너비 우선 탐색하여 최단거리 반환
    private static int bfs(Point start, Point end){
        // 7.너비 우선 탐색 초기 과정
        int[][] visit = new int[N][M];
        ArrayDeque<Point> queue = new ArrayDeque<>();
        visit[start.y][start.x] = 1;
        queue.addFirst(start);
        
        while(!queue.isEmpty()){
            Point now = queue.poll();
            
            // 8.네 방향으로 이동
            for(int i=0; i<4; i++){
                int nx = now.x + rx[i];
                int ny = now.y + ry[i];
                
                // 9.범위를 벗어나는 경우 예외 처리
                if(nx < 0 || ny < 0 || nx >= M || ny >= N)
                    continue;
                
                // 10.이미 방문한 지점인 경우 탐색하지 않음
                if(visit[ny][nx] > 0)
                    continue;
                
                // 11.X가 아닌 지점만 이동 가능
                if(newMap[ny][nx] == 'X')
                    continue;
                
                // 12.거리 1증가
                visit[ny][nx] = visit[now.y][now.x] + 1;
                
                // 13.다음 정점을 큐에 넣음
                queue.add(new Point(nx, ny));

                // 14.도착점에 도달하면 최단 거리를 반환
                if(nx == end.x && ny == end.y)
                    return visit[end.y][end.x] - 1;
            }
        }
        return -1;
    }
}
