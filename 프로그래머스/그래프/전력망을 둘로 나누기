import java.util.*;
class Solution {
    public static boolean[] visited;
    public static ArrayList<Integer>[] adjList;
    public static int answer, N;
    public int solution(int n, int[][] wires) {
        answer = n;
        N = n;
        visited = new boolean[n+1];
        
        // 1.전선의 연결 정보를 저장할 인접 리스트 초기화
        adjList = new ArrayList[n+1];
        for(int i=1; i<=n; i++){
            adjList[i] = new ArrayList<>();
        }
        
        // 2.전선의 연결 정보를 인접 리스트에 저장
        for(int[] wire : wires){
            adjList[wire[0]].add(wire[1]);
            adjList[wire[1]].add(wire[0]);
        }
        
        // 3.깊이 우선 탐색 시작
        dfs(1);
        
        return answer;
    }
    
    public int dfs(int now) {
        visited[now] = true;
        
        // 4.자식 노드의 수를 저장하고 반환할 변수 선언
        int sum = 0;
        // 5.연결된 모든 전선을 확인
        for(int next : adjList[now]){
            if(!visited[next]){
                // 6.(전체 노드 - 자식 트리의 노드 수) - (자식 트리의 노드 수) 의 절대값이 가장 작은 값을 구함
                int cnt = dfs(next);
                answer = Math.min(answer, Math.abs(N - cnt*2));
                // 7.자식 노드의 수를 더함
                sum+=cnt;
            }
        }
        // 8.전체 자식 노드의 수에 1(현재 now 노드)을 더해서 반환
        return sum+1;
    }
}
