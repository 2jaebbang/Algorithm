import java.util.*;
class Solution {
    public int solution(String s) {
        int answer = 0;
        // 1.들어가는 괄호 선언
        HashMap<Character, Character> map = new HashMap<>();
        map.put(')','(');
        map.put(']','[');
        map.put('}','{');
        
        int n = s.length(); // 원본 문자열의 길이 저장
        s += s; // 원본 문자열에 이어서 문자열 덧붙임
        
        // 2.확인할 문자열의 시작 인덱스를 0부터 n까지 이동
        A:for(int i=0; i<n; i++){
            Stack<Character> stack = new Stack<>();
            // 3.i(시작 위치)부터 원본 문자열의 길이인 n개까지 올바른 괄호 문자열인지 확인 (괄호 회전)
            for(int j=i; j<n+i; j++){
                char c = s.charAt(j);
                // 4.map에 해당 키가 없을 경우 열린괄호
                if(!map.containsKey(c)) {
                    stack.push(c);
                } else {
                    // 5.짝이 맞지 않으면 내부 for문은 종료하고 for문 A로 이동
                    if(stack.isEmpty() || !stack.pop().equals(map.get(c)))
                        continue A;
                }
            }
            // 6.continue 되지 않았고, 스택이 비어있으면 올바른 괄호 문자열
            if(stack.isEmpty()){
                answer++;
            }
        }
        return answer;
    }
}
