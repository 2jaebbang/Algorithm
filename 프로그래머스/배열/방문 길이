import java.util.*;
class Solution {
    // 1.좌표평면을 벗어나는지 체크하는 메서드
    private static boolean isValidMove(int nx, int ny) {
        return 0 <= nx && nx < 11 && 0 <= ny && ny < 11;
    }
    
    // 2.다음 좌표 결정을 위한 해시맵 생성
    private static final HashMap<Character, int[]> location = new HashMap<>();
    
    private static void initLocation() {
        location.put('U', new int[]{0, 1}); 
        location.put('D', new int[]{0, -1}); 
        location.put('L', new int[]{-1, 0}); 
        location.put('R', new int[]{1, 0});
    }
    
    public int solution(String dirs) {   
        initLocation();
        // 3.초기 위치값 설정
        int x = 5, y = 5;
        
        // 4.이미 지나간 길 저장 (겹치는 좌표는 1개로 처리하기 위해 Set 사용)
        HashSet<String> answer = new HashSet<>();
        
        for(int i=0; i<dirs.length(); i++){
            // 현재 적용해야하는 좌표값
            int[] offset = location.get(dirs.charAt(i));
            int nx = x + offset[0];
            int ny = y + offset[1];
            
            // 5.벗어난 좌표는 인정하지 않음
            if (!isValidMove(nx, ny))
                continue;
            
            // 6.A에서 B로 간 경우 B에서 A도 추가해야 함 (총 경로의 개수는 방향성이 없음)
            answer.add(x + " " + y + " " + nx + " " + ny);
            answer.add(nx + " " + ny + " " + x + " " + y);
            
            // 7.좌표를 이동했으므로 업데이트
            x = nx;
            y = ny;
        }
        return answer.size()/2;
    }
}
