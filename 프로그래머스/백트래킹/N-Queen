class Solution {
    private int N;
    private boolean[] width;
    private boolean[] d1;
    private boolean[] d2;
    private int answer;
    
    // 1.퀸이 서로 공격할 수 없는 위치에 놓이는 경우의 수를 구하는 함수
    public void dfs(int y) {
        // 2.모든 행에 대해서 퀸의 위치가 결정되었을 경우
        if(y==N)
            // 3.해결 가능한 경우의 수를 1 증가시킴
            answer++;
        else {
            // 4.현재 행에서 퀸이 놓일 수 있는 모든 위치를 시도
            for(int i=0; i<N; i++){
                // 5.해당 위치에 이미 퀸이 있는 경우, 대각선상에 퀸이 있는 경우 스킵
                if(width[i] || d1[i+y] || d2[i-y+N])
                    continue;
                
                // 6.해당 위치에 퀸을 놓음
                width[i] = d1[i+y] = d2[i-y+N] = true;
                
                // 7.다음 행으로 이동하여 재귀적으로 해결 가능한 경우의 수 찾기
                dfs(y+1);
                
                // 8.해당 위치에 놓인 퀸을 제거함
                width[i] = d1[i+y] = d2[i-y+N] = false;
            }
        } 
    }
    
    public int solution(int n) {
        width = new boolean[n];
        d1 = new boolean[n*2];
        d2 = new boolean[n*2];
        answer = 0;
        N = n;
        dfs(0);
        return answer;
    }
}
