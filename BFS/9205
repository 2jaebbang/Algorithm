import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int T, N, startY, startX, endY, endX;
    static ArrayList<int[]> map;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        T = Integer.parseInt(br.readLine());
        for (int t = 0; t < T; t++) {
            map = new ArrayList<>();
            N = Integer.parseInt(br.readLine());
            StringTokenizer st = new StringTokenizer(br.readLine());
            startX = Integer.parseInt(st.nextToken());
            startY = Integer.parseInt(st.nextToken());
            for (int i = 0; i < N; i++) {
                st = new StringTokenizer(br.readLine());
                int x = Integer.parseInt(st.nextToken());
                int y = Integer.parseInt(st.nextToken());
                map.add(new int[]{y, x});
            }
            st = new StringTokenizer(br.readLine());
            endX = Integer.parseInt(st.nextToken());
            endY = Integer.parseInt(st.nextToken());

            if(bfs()){
                System.out.println("happy");
            } else {
                System.out.println("sad");
            }
        }
    }

    static boolean bfs() {
        Queue<int[]> queue = new LinkedList<>();
        boolean[] visited = new boolean[N];
        //첫 큐에 시작위치르 넣는다
        queue.add(new int[]{startY, startX});
        while (!queue.isEmpty()) {
            //1.큐에서 꺼내옴
            int[] poll = queue.poll();
            int py = poll[0];
            int px = poll[1];

            //2.목적지인가? 현재 위치에서 목적지까지 1000이내 (50m * 맥주20개 = 1000)일 경우 true
            if (Math.abs(py - endY) + Math.abs(px - endX) <= 1000) {
                return true;
            } else {
                //3.연결된 곳을 순회
                for (int i = 0; i < N; i++) {
                    //4.갈수 있는가 아직 방문하지 않았고 현위치(py,px)에서 거리가 1000이내인 편의점
                    int dy = map.get(i)[0];
                    int dx = map.get(i)[1];
                    int distance = Math.abs(py - dy) + Math.abs(px - dx);
                    if (!visited[i] && distance <= 1000) {
                        //5.체크인
                        visited[i] = true;
                        //6.큐에 넣음
                        queue.add(new int[] {dy, dx});
                    }
                }
            }
        }
        return false;
    }
}
