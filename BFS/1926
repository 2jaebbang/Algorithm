import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static class Picture {
        int y;
        int x;
        public Picture(int y, int x){
            this.y = y;
            this.x = x;
        }
    }

    static final int[] dx = {-1, 1, 0, 0};
    static final int[] dy = {0, 0, -1, 1};
    static int N, M, picCnt;
    static int max = Integer.MIN_VALUE;
    static int[][] map;
    static boolean[][] visited;
    static Queue<Picture> queue;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new int[N][M];
        visited = new boolean[N][M];
        queue = new LinkedList<>();

        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j< M; j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(!visited[i][j] && map[i][j] == 1){
                    queue.add(new Picture(i,j));
                    picCnt++;
                    max = Math.max(bfs(), max) ;
                }
            }
        }

        System.out.println(picCnt);
        if(picCnt == 0){
            System.out.println(0);
        } else {
            System.out.println(max);
        }
    }

    static int bfs(){
        int cnt = 0;
        while(!queue.isEmpty()){
            //1.큐에서 꺼내옴
            Picture pic = queue.poll();
            //2.목적지인가? 생략
            //3.연결된 곳을 순회
            for(int i=0; i<4; i++){
                int ty = pic.y + dy[i];
                int tx = pic.x + dx[i];
                //4.갈 수 있는가?
                if(ty >=0 && ty < N && tx >=0 && tx< M && !visited[ty][tx] && map[ty][tx]==1){
                    //5.체크인
                    visited[ty][tx] = true;
                    //6.큐에 넣음.
                    queue.add(new Picture(ty, tx));
                    cnt++;
                }
            }
        }
        //그림의 넓이가 1일 경우에는 방문가능 조건문을 패스하기 때문
        if(cnt == 0)
            cnt = 1;
        return cnt;
    }
}
